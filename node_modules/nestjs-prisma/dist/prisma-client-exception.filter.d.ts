import { ArgumentsHost, HttpException, HttpServer } from '@nestjs/common';
import { BaseExceptionFilter, HttpAdapterHost } from '@nestjs/core';
import { Prisma } from '@prisma/client';
export declare type GqlContextType = 'graphql';
export type ErrorCodesStatusMapping = {
    [key: string]: number | {
        statusCode?: number;
        errorMessage?: string;
    };
};
export declare class PrismaClientExceptionFilter extends BaseExceptionFilter {
    private readonly defaultMapping;
    private readonly userDefinedMapping?;
    constructor(applicationRef?: HttpServer, errorCodesStatusMapping?: ErrorCodesStatusMapping);
    catch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost): void | HttpException | Prisma.PrismaClientKnownRequestError;
    private catchClientKnownRequestError;
    private userDefinedStatusCode;
    private defaultStatusCode;
    private userDefinedExceptionMessage;
    private defaultExceptionMessage;
}
export declare function providePrismaClientExceptionFilter(errorCodesStatusMapping?: ErrorCodesStatusMapping): {
    provide: string;
    useFactory: ({ httpAdapter }: HttpAdapterHost) => PrismaClientExceptionFilter;
    inject: (typeof HttpAdapterHost)[];
};
