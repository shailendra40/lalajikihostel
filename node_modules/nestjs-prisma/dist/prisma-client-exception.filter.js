"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.providePrismaClientExceptionFilter = exports.PrismaClientExceptionFilter = void 0;
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const client_1 = require("@prisma/client");
let PrismaClientExceptionFilter = class PrismaClientExceptionFilter extends core_1.BaseExceptionFilter {
    constructor(applicationRef, errorCodesStatusMapping) {
        super(applicationRef);
        this.defaultMapping = {
            P2000: common_1.HttpStatus.BAD_REQUEST,
            P2002: common_1.HttpStatus.CONFLICT,
            P2025: common_1.HttpStatus.NOT_FOUND,
        };
        this.userDefinedMapping = errorCodesStatusMapping;
    }
    catch(exception, host) {
        return this.catchClientKnownRequestError(exception, host);
    }
    catchClientKnownRequestError(exception, host) {
        const statusCode = this.userDefinedStatusCode(exception) ||
            this.defaultStatusCode(exception);
        const message = this.userDefinedExceptionMessage(exception) ||
            this.defaultExceptionMessage(exception);
        if (host.getType() === 'http') {
            if (statusCode === undefined) {
                return super.catch(exception, host);
            }
            return super.catch(new common_1.HttpException({ statusCode, message }, statusCode), host);
        }
        else if (host.getType() === 'graphql') {
            if (statusCode === undefined) {
                return exception;
            }
            return new common_1.HttpException({ statusCode, message }, statusCode);
        }
    }
    userDefinedStatusCode(exception) {
        var _a;
        const userDefinedValue = (_a = this.userDefinedMapping) === null || _a === void 0 ? void 0 : _a[exception.code];
        return typeof userDefinedValue === 'number'
            ? userDefinedValue
            : userDefinedValue === null || userDefinedValue === void 0 ? void 0 : userDefinedValue.statusCode;
    }
    defaultStatusCode(exception) {
        return this.defaultMapping[exception.code];
    }
    userDefinedExceptionMessage(exception) {
        var _a;
        const userDefinedValue = (_a = this.userDefinedMapping) === null || _a === void 0 ? void 0 : _a[exception.code];
        return typeof userDefinedValue === 'number'
            ? undefined
            : userDefinedValue === null || userDefinedValue === void 0 ? void 0 : userDefinedValue.errorMessage;
    }
    defaultExceptionMessage(exception) {
        const shortMessage = exception.message.substring(exception.message.indexOf('â†’'));
        return (`[${exception.code}]: ` +
            shortMessage
                .substring(shortMessage.indexOf('\n'))
                .replace(/\n/g, '')
                .trim());
    }
};
exports.PrismaClientExceptionFilter = PrismaClientExceptionFilter;
exports.PrismaClientExceptionFilter = PrismaClientExceptionFilter = __decorate([
    (0, common_1.Catch)(client_1.Prisma === null || client_1.Prisma === void 0 ? void 0 : client_1.Prisma.PrismaClientKnownRequestError),
    __metadata("design:paramtypes", [Object, Object])
], PrismaClientExceptionFilter);
function providePrismaClientExceptionFilter(errorCodesStatusMapping) {
    return {
        provide: core_1.APP_FILTER,
        useFactory: ({ httpAdapter }) => {
            return new PrismaClientExceptionFilter(httpAdapter, errorCodesStatusMapping);
        },
        inject: [core_1.HttpAdapterHost],
    };
}
exports.providePrismaClientExceptionFilter = providePrismaClientExceptionFilter;
//# sourceMappingURL=prisma-client-exception.filter.js.map